# vim:filetype=i3
# This file has been auto-generated by i3-config-wizard(1).
# It will not be overwritten, so edit it as you like.
#
# Should you change your keyboard layout some time, delete
# this file and re-run i3-config-wizard(1).
#

# i3 config file (v4)
#
# Please see https://i3wm.org/docs/userguide.html for a complete reference!

set $mod Mod4
set $alt Mod1
set $TERMINAL konsole

# OneDark colors
set $onedark_yellow #e5c07b
set $onedark_visual_grey #3e4452

# Background color: OneDark Black
set $bg_color #282c34
# Foreground color: OneDark White
set $fg_color #aab2bf
# Primary color: OneDark Blue
set $pr_color #61afef
# Alert color: OneDark Red
set $al_color #e06c75
# Highlight color: OneDark Green
set $hl_color #98c379
# Separator color: OneDark Comment Grey
set $sp_color #5c6370

# Set path to volume utils
set $SCRIPT_DIR ~/.config/i3blocks

# Command for the status line (used with -t, requires -u)
#   ie: i3blocks, i3status
set $STATUS_CMD i3blocks

# Signal used to update the status line (used with -u, requires -t)
#   i3blocks uses SIGRTMIN+10 by default
#   i3status uses SIGUSR1 by default
set $statussig -SIGRTMIN+10

# Amount to increase/decrease volume as a percentage (used with -i, -d)
set $volumestep 4

# alsa-utils settings when not using pulseaudio-utils
#
# To configure a default card, see https://www.alsa-project.org/main/index.php/Asoundrc
#
# Card number to control. (used with -a and -c)
#   If not specified, i3-volume will let `amixer` use a default.
#   List cards: aplay -l
#set $alsacard 1
# Font for window titles. Will also be used by the bar unless a different font
# is used in the bar {} block below.
font pango:Noto Condensed SemiBold 12

# gaps inner all set 20
# gaps outer current plus 5
# gaps horizontal current plus 40
# gaps outer current toggle 60
gaps outer 6
gaps inner 6
smart_borders on

for_window [class=".*"] border pixel 2
hide_edge_borders both

# Init compton
exec --no-startup-id compton -f

# Bluetooth management
exec --no-startup-id blueman-applet

# Network management
exec --no-startup-id nm-applet

# Caffeine indicator
exec --no-startup-id caffeine-indicator

# Primer support (Graphic Board Indicator)
exec --no-startup-id prime-indicator

# Run script to set up polybar
exec_always --no-startup-id ~/.config/polybar/launch

# Conky
# exec --no-startup-id conky

# Auto lock
exec xautolock -detectsleep \
  -time 15 -locker "betterlockscreen -l blur -t 'Dont\'t touch me!'" \
  -notify 30 \
  -notifier "notify-send -u critical -t 10000 -- 'Locking screen in 30 seconds'"

# Init alttab
exec --no-startup-id alttab -w 1 -fg "$fg_color" -bg "$bg_color" -frame "$fg_color" -t 128x150 -i 127x64

# Wallpaper
# set last used background
exec --no-startup-id bash ~/.fehbg

# reload the configuration file
bindsym $mod+Shift+c reload
# restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym $mod+Shift+r restart
# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec bash ~/.config/rofi/power 'i3-msg exit'
bindsym $mod+Shift+b exec bash ~/.config/rofi/books
bindsym $mod+Shift+t exec bash ~/.config/rofi/virtualbox
# bindsym $mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -b 'Yes, exit i3' 'i3-msg exit'"
# lockscreen
bindsym Ctrl+$mod+l exec betterlockscreen -l blur -t "Don't touch me!"


# Before i3 v4.8, we used to recommend this one as the default:
# font -misc-fixed-medium-r-normal--13-120-75-75-C-70-iso10646-1
# The font above is very space-efficient, that is, it looks good, sharp and
# clear in small sizes. However, its unicode glyph coverage is limited, the old
# X core fonts rendering does not support right-to-left and this being a bitmap
# font, it doesn’t scale on retina/hidpi displays.

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal
bindsym $mod+Return exec $TERMINAL
bindsym $mod+b exec google-chrome

# kill focused window
bindsym $mod+x kill
bindsym $alt+F4 kill

# start dmenu (a program launcher)
# bindsym $mod+d exec dmenu_run
# There also is the (new) i3-dmenu-desktop which only displays applications
# shipping a .desktop file. It is a wrapper around dmenu, so you need that
# installed.
bindsym $mod+d exec --no-startup-id rofi -show combi -show-icons
bindsym $mod+Shift+d exec --no-startup-id rofi -show ssh -terminal $TERMINAL
bindsym $mod+Tab exec --no-startup-id rofi -show window

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# move focused workspace
bindsym $mod+Shift+n move workspace to output right
bindsym $mod+Shift+p move workspace to output left

# alternatively, you can use the cursor keys:
bindsym Shift+$alt+Left move workspace to output left
bindsym Shift+$alt+Right move workspace to output right
bindsym Shift+$alt+Up move workspace to output up
bindsym Shift+$alt+Down move workspace to output down

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# Split window
bindsym $mod+v split v
bindsym $mod+Shift+v split h

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

# focus the child container
bindsym $mod+Shift+a focus child

# set workspace
set $workspace1 "1: "
set $workspace2 "2: "
set $workspace3 "3: "
set $workspace4 "4: "
set $workspace5 "5: "
set $workspace6 "6: "
set $workspace7 "7: "
set $workspace8 "8: "
set $workspace9 "9: "
set $workspace10 "10: "

# switch to workspace
bindsym $mod+1 workspace $workspace1
bindsym $mod+2 workspace $workspace2
bindsym $mod+3 workspace $workspace3
bindsym $mod+4 workspace $workspace4
bindsym $mod+5 workspace $workspace5
bindsym $mod+6 workspace $workspace6
bindsym $mod+7 workspace $workspace7
bindsym $mod+8 workspace $workspace8
bindsym $mod+9 workspace $workspace9
bindsym $mod+0 workspace $workspace10

# move focused container to workspace
bindsym $mod+Shift+1 exec i3-msg 'move container to workspace $workspace1'  && i3-msg 'workspace $workspace1'
bindsym $mod+Shift+2 exec i3-msg 'move container to workspace $workspace2'  && i3-msg 'workspace $workspace2'
bindsym $mod+Shift+3 exec i3-msg 'move container to workspace $workspace3'  && i3-msg 'workspace $workspace3'
bindsym $mod+Shift+4 exec i3-msg 'move container to workspace $workspace4'  && i3-msg 'workspace $workspace4'
bindsym $mod+Shift+5 exec i3-msg 'move container to workspace $workspace5'  && i3-msg 'workspace $workspace5'
bindsym $mod+Shift+6 exec i3-msg 'move container to workspace $workspace6'  && i3-msg 'workspace $workspace6'
bindsym $mod+Shift+7 exec i3-msg 'move container to workspace $workspace7'  && i3-msg 'workspace $workspace7'
bindsym $mod+Shift+8 exec i3-msg 'move container to workspace $workspace8'  && i3-msg 'workspace $workspace8'
bindsym $mod+Shift+9 exec i3-msg 'move container to workspace $workspace9'  && i3-msg 'workspace $workspace9'
bindsym $mod+Shift+0 exec i3-msg 'move container to workspace $workspace10' && i3-msg 'workspace $workspace10'

# cycle through active workspaces
bindsym $mod+n workspace next
bindsym $mod+p workspace prev

# support to display caps lock status
bindsym --release Caps_Lock exec pkill -SIGRTMIN+11 i3blocks

# screenshot
bindsym --release Print exec scrot -e 'mv $f /tmp/ && feh /tmp/$$(basename $f)'
bindsym --release $alt+Sys_Req exec scrot -u -e 'mv $f /tmp/ && feh /tmp/$$(basename $f)'
bindsym --release Shift+Print exec scrot -s -e 'mv $f /tmp/ && feh /tmp/$$(basename $f)'
bindsym --release Ctrl+Print exec scrot -e 'xclip -selection clipboard -t image/png -i $f && mv $f /tmp/'
bindsym --release $alt+Control+Sys_Req exec scrot -b -u -e 'xclip -selection clipboard -t image/png -i $f && mv $f /tmp/'
bindsym --release Ctrl+Shift+Print exec scrot -s -e 'xclip -selection clipboard -t image/png -i $f && mv $f /tmp/'

# resize window (you can also use the mouse for that)
mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym h resize shrink width 5 px or 5 ppt
    bindsym j resize grow height 5 px or 5 ppt
    bindsym k resize shrink height 5 px or 5 ppt
    bindsym l resize grow width 5 px or 5 ppt

    # same bindings, but for the arrow keys
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt

    # back to normal: Enter or Escape bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym Return mode "default"
}

bindsym $mod+r mode "resize"

set $set_display_mode "Set display layout: [w]ork, [h]ome, [r]ose. Enter/Esc to close."

mode $set_display_mode {
    bindsym w exec bash ~/.i3/screenlayouts/work.sh && \
                i3-msg mode 'default' && \
                i3-msg 'rename workspace $workspace1 to "tmp"' && \
                i3-msg 'rename workspace $workspace2 to $workspace1' && \
                i3-msg 'rename workspace "tmp" to $workspace2'

    bindsym Escape mode "default"
    bindsym Return mode "default"
}

bindsym $mod+Shift+w mode $set_display_mode

# Symbolic name for sink (numeric index not supported) (used with -s $sinkname)
#   Recommended: comment out this setting and omit the -s option to use default sink
#   List sink names: pacmd list-sinks | awk -F "[<>]" '/^\s+name: <.*>/{print $2}'
#set $sinkname alsa_output.pci-0000_00_1b.0.analog-stereo

# Using pulseaudio-utils (append "-s $sinkname" without quotes to override default sink)
bindsym XF86AudioRaiseVolume exec $SCRIPT_DIR/volume -np -i $volumestep -t $STATUS_CMD -u $statussig
bindsym XF86AudioLowerVolume exec $SCRIPT_DIR/volume -np -d $volumestep -t $STATUS_CMD -u $statussig
bindsym XF86AudioMute        exec $SCRIPT_DIR/volume -mn -t $STATUS_CMD -u $statussig

for_window [class="Yad"] floating enable

# Open Spotify in last workspace
assign [class="Spotify"] $workspace10
assign [title=".*Google Docs$" window_role="pop-up"] $workspace3
assign [title=".* - Pocket Casts$" window_role="pop-up"] $workspace10
assign [class=Thunderbird] $workspace8
assign [class=TelegramDesktop] $workspace9
assign [class=Skype] $workspace9

for_window [class="Spotify"] move to workspace $workspace10
for_window [title=".*Google Docs$" window_role="pop-up"] move to workspace $workspace3
for_window [title=".* - Pocket Casts$" window_role="pop-up"] move to workspace $workspace10

# colour of             border,   background, text,     indicator, child_border
client.focused          $al_color $bg_color   $fg_color $al_color  $hl_color
client.focused_inactive $bg_color $bg_color   $fg_color $bg_color  $pr_color
client.unfocused        $bg_color $bg_color   $fg_color $bg_color  $pr_color
client.urgent           $bg_color $bg_color   $fg_color $bg_color  $pr_color
client.placeholder      $bg_color $bg_color   $fg_color $bg_color  $pr_color
client.background       $bg_color
